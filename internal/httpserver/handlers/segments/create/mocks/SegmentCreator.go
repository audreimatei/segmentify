// Code generated by mockery v2.33.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "segmentify/internal/models"
)

// SegmentCreator is an autogenerated mock type for the SegmentCreator type
type SegmentCreator struct {
	mock.Mock
}

// CreateSegment provides a mock function with given fields: ctx, segment
func (_m *SegmentCreator) CreateSegment(ctx context.Context, segment models.Segment) (models.Segment, error) {
	ret := _m.Called(ctx, segment)

	var r0 models.Segment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Segment) (models.Segment, error)); ok {
		return rf(ctx, segment)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.Segment) models.Segment); ok {
		r0 = rf(ctx, segment)
	} else {
		r0 = ret.Get(0).(models.Segment)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.Segment) error); ok {
		r1 = rf(ctx, segment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSegmentCreator creates a new instance of SegmentCreator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSegmentCreator(t interface {
	mock.TestingT
	Cleanup(func())
}) *SegmentCreator {
	mock := &SegmentCreator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
